{"version":3,"sources":["hooks.js","Components.js","App.js","serviceWorker.js","index.js"],"names":["useFetchAddress","zipCode","useState","address","setAddress","useEffect","urlAPI","a","length","fetch","data","json","console","log","fetchData","Form","isValid","setisValid","show","msg","alert","setAlert","cep","logradouro","numero","complemento","bairro","localidade","uf","form","setForm","handleChange","e","target","name","value","upddateForm","checkRequiredForm","validate","objForm","key","obj","JSON","stringify","state","className","onSubmit","preventDefault","htmlFor","type","minLength","maxLength","onChange","onBlur","disabled","placeholder","FormPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSA+BeA,EA7BS,SAACC,GAAa,IAAD,EACHC,mBAAS,IADN,mBAC1BC,EAD0B,KACjBC,EADiB,KA0BjC,OAvBAC,qBAAU,WACN,IAAMC,EAAM,mCAA+BL,EAA/B,UADA,4CAGZ,8BAAAM,EAAA,yDAC0B,IAAnBN,EAAQO,OADf,0CAG+BC,MAAMH,GAHrC,cAGkBI,EAHlB,gBAI+BA,EAAKC,OAJpC,QAIkBA,EAJlB,SAOgBP,EAAWO,GAP3B,kDAUYP,EAAW,IACXQ,QAAQC,IAAR,MAXZ,2DAHY,0DAmBZC,KAED,CAACb,IAEGE,GCzBLY,EAAO,WAAO,IAAD,EACiBb,oBAAS,GAD1B,mBACRc,EADQ,KACCC,EADD,OAEWf,mBAAS,CAACgB,MAAM,EAAOC,IAAK,KAFvC,mBAERC,EAFQ,KAEDC,EAFC,OAGQnB,mBAAS,CAC5BoB,IAAI,GACJC,WAAW,GACXC,OAAO,GACPC,YAAY,GACZC,OAAO,GACPC,WAAW,GACXC,GAAG,KAVQ,mBAGRC,EAHQ,KAGFC,EAHE,KAaT3B,EAAUH,EAAgB6B,EAAKP,KAE/BS,EAAe,SAACC,GAAO,IAAD,EACAA,EAAEC,OAAlBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACRC,EAAW,eAAOP,EAAP,eAAcK,EAAOC,IAEtCL,EAAQM,IAGNC,EAAoB,WACtB,IAAIC,GAAW,EACTC,EAAUV,EAEhB,IAAI,IAAIW,KAAOD,EACS,KAAjBA,EAAQC,KACPF,GAAW,GAInBrB,EAAWqB,IAqCf,OAZAjC,qBAAU,WACN,GAAuB,IAApBwB,EAAKP,IAAId,SALCiC,EAKwBtC,EAJN,OAAxBuC,KAAKC,UAAUF,IAIyB,CAAC,IACrClB,EAAsCpB,EAAtCoB,WAAYG,EAA0BvB,EAA1BuB,OAAQC,EAAkBxB,EAAlBwB,WAAYC,EAAMzB,EAANyB,GACvCE,GAAQ,SAACc,GACL,OAAO,eACAA,EADP,CAEIrB,aAAYG,SAAQC,aAAYC,UAVhC,IAACa,IAcd,CAACZ,EAAKP,IAAKnB,IAGV,oCACKiB,EAAMF,MAAQ,yBAAK2B,UAAU,uBAAuBzB,EAAMD,KAC3D,0BAAM2B,SArCK,SAACd,GAChBA,EAAEe,iBAEC9B,IACCI,EAAS,CAAEH,MAAM,EAAMC,IAAK,yCAC5BF,GAAW,GACXa,EAAQ,CACJR,IAAI,GACJC,WAAW,GACXC,OAAO,GACPC,YAAY,GACZC,OAAO,GACPC,WAAW,GACXC,GAAG,QAyBH,2BAAOoB,QAAQ,cAAf,OACA,2BAAOC,KAAK,OAAOJ,UAAU,WAAWX,KAAK,MAAMC,MAAON,EAAKP,IAAK4B,UAAU,IAAIC,UAAU,IAAIC,SAAUrB,EAAcsB,OAAQhB,IAChI,yBAAKQ,UAAU,gBACX,6BACI,2BAAOG,QAAQ,cAAf,eACA,2BAAOC,KAAK,OAAOf,KAAK,aAAaC,MAAON,EAAKN,WAAY6B,SAAUrB,EAAcuB,UAAQ,KAEjG,yBAAKT,UAAU,gBACX,2BAAOG,QAAQ,UAAf,aACA,2BAAOC,KAAK,OAAOf,KAAK,SAASC,MAAON,EAAKL,OAAQ4B,SAAUrB,EAAcsB,OAAQhB,KAEzF,yBAAKQ,UAAU,gBACX,2BAAOG,QAAQ,eAAf,eACA,2BAAOC,KAAK,OAAOf,KAAK,cAAcC,MAAON,EAAKJ,YAAa2B,SAAUrB,EAAcsB,OAAQhB,EAAmBkB,YAAY,qBAElI,6BACI,2BAAOP,QAAQ,UAAf,UACA,2BAAOC,KAAK,OAAOf,KAAK,SAASC,MAAON,EAAKH,OAAQ0B,SAAUrB,EAAcuB,UAAQ,KAEzF,6BACI,2BAAON,QAAQ,cAAf,UACA,2BAAOC,KAAK,OAAOf,KAAK,aAAaC,MAAON,EAAKF,WAAYyB,SAAUrB,EAAcuB,UAAQ,KAEjG,6BACI,2BAAON,QAAQ,MAAf,MACA,2BAAOC,KAAK,OAAOf,KAAK,KAAKC,MAAON,EAAKD,GAAIwB,SAAUrB,EAAcuB,UAAQ,MAIrF,4BAAQL,KAAK,SAASK,UAAWtC,GAAjC,aAcDwC,EARE,WACb,OACI,oCACI,kBAAC,EAAD,QCtGGC,MARf,WACE,OACE,yBAAKZ,UAAU,aACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,a","file":"static/js/main.19534cf5.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetchAddress = (zipCode) => {\r\n    const [address, setAddress] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const urlAPI = `https://viacep.com.br/ws/${zipCode}/json/`;\r\n\r\n        async function fetchData() {\r\n            if(zipCode.length === 8) {\r\n                try{\r\n                    const data = await fetch(urlAPI);\r\n                    const json = await data.json();\r\n    \r\n                    if(json) {\r\n                        setAddress(json);\r\n                    }\r\n                } catch(error) {\r\n                    setAddress({});\r\n                    console.log(error);\r\n                }\r\n            }\r\n        }\r\n    \r\n        fetchData();\r\n\r\n    }, [zipCode]);\r\n\r\n    return address;\r\n}\r\n\r\nexport default useFetchAddress;","import React, {useState, useEffect} from 'react';\r\nimport useFetchAddress from './hooks';\r\n\r\nconst Form = () => {\r\n    const [isValid, setisValid  ] = useState(false);\r\n    const [alert, setAlert] = useState({show: false, msg: ''});\r\n    const [form, setForm]= useState({\r\n        cep:'',\r\n        logradouro:'',\r\n        numero:'',\r\n        complemento:'',\r\n        bairro:'',\r\n        localidade:'',\r\n        uf:'',\r\n    });\r\n    \r\n    const address = useFetchAddress(form.cep);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const upddateForm = {...form, [name]: value}\r\n\r\n        setForm(upddateForm);\r\n    }\r\n\r\n    const checkRequiredForm = () => {\r\n        let validate = true;\r\n        const objForm = form;\r\n        \r\n        for(var key in objForm) {\r\n            if(objForm[key] === '') {\r\n                validate = false;\r\n            }\r\n        }\r\n\r\n        setisValid(validate);\r\n    }\r\n\r\n    const submitData = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(setisValid) {\r\n            setAlert({ show: true, msg: \"Formulário preenchido com sucesso\"});\r\n            setisValid(false);\r\n            setForm({\r\n                cep:'',\r\n                logradouro:'',\r\n                numero:'',\r\n                complemento:'',\r\n                bairro:'',\r\n                localidade:'',\r\n                uf:'',\r\n            });\r\n        }\r\n    }\r\n\r\n    const isEmpty = (obj) =>{\r\n        return JSON.stringify(obj) === '{}';\r\n    }    \r\n\r\n    useEffect(() => {\r\n        if(form.cep.length === 8 && !isEmpty(address)) {\r\n            const {logradouro, bairro, localidade, uf} = address;\r\n            setForm((state) => {\r\n                return {\r\n                    ...state,\r\n                    logradouro, bairro, localidade, uf\r\n                }\r\n            });\r\n        }\r\n    }, [form.cep, address]);\r\n\r\n    return(\r\n        <>\r\n            {alert.show && <div className=\"alert alert--sucess\">{alert.msg}</div>}\r\n            <form onSubmit={submitData}>\r\n                <label htmlFor=\"logradouro\">CEP</label>\r\n                <input type=\"text\" className=\"input-sm\" name=\"cep\" value={form.cep} minLength=\"8\" maxLength=\"8\" onChange={handleChange} onBlur={checkRequiredForm} />\r\n                <div className=\"input-inline\">\r\n                    <div>\r\n                        <label htmlFor=\"logradouro\">endereço</label>\r\n                        <input type=\"text\" name=\"logradouro\" value={form.logradouro} onChange={handleChange} disabled />\r\n                    </div>\r\n                    <div className=\"field-inline\">\r\n                        <label htmlFor=\"numero\">número</label>\r\n                        <input type=\"text\" name=\"numero\" value={form.numero} onChange={handleChange} onBlur={checkRequiredForm} />\r\n                    </div>\r\n                    <div className=\"field-inline\">\r\n                        <label htmlFor=\"complemento\">complemento</label>\r\n                        <input type=\"text\" name=\"complemento\" value={form.complemento} onChange={handleChange} onBlur={checkRequiredForm} placeholder=\"ex.: casa, apto\" />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"bairro\">bairro</label>\r\n                        <input type=\"text\" name=\"bairro\" value={form.bairro} onChange={handleChange} disabled />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"localidade\">cidade</label>\r\n                        <input type=\"text\" name=\"localidade\" value={form.localidade} onChange={handleChange} disabled />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"uf\">UF</label>\r\n                        <input type=\"text\" name=\"uf\" value={form.uf} onChange={handleChange} disabled />\r\n                    </div>\r\n\r\n                </div>\r\n                <button type=\"submit\" disabled={!isValid}>enviar</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FormPage = () => {\r\n    return(\r\n        <>\r\n            <Form />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormPage;","import React from 'react';\nimport './App.css';\nimport FormPage from './Components.js';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <FormPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}